{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///Users/jw11ab/repo/procurdo/apps/web/lib/analytics.ts"],"sourcesContent":["export const GA_TRACKING_ID =\n  process.env.NEXT_PUBLIC_GA_ID || \"G-2KT03XRWKB\";\n\nexport const isGaEnabled =\n  process.env.NODE_ENV === \"production\" && Boolean(GA_TRACKING_ID);\n\ndeclare global {\n  interface Window {\n    dataLayer: unknown[];\n    gtag: (...args: unknown[]) => void;\n  }\n}\n\nexport function pageview(url: string) {\n  if (!isGaEnabled) return;\n  if (typeof window === \"undefined\") return;\n  if (typeof window.gtag !== \"function\") return;\n  window.gtag(\"config\", GA_TRACKING_ID, {\n    page_path: url,\n  });\n}\n\n// Consent Mode v2 helpers\nexport type ConsentValue = \"granted\" | \"denied\";\nexport type ConsentState = {\n  ad_storage: ConsentValue;\n  ad_user_data: ConsentValue;\n  ad_personalization: ConsentValue;\n  analytics_storage: ConsentValue;\n  functionality_storage: ConsentValue;\n  personalization_storage: ConsentValue;\n  security_storage: ConsentValue; // should remain granted for essentials\n};\n\nexport const CONSENT_STORAGE_KEY = \"cookie-consent-v2\";\n\nexport function getStoredConsent(): ConsentState | null {\n  if (typeof window === \"undefined\") return null;\n  try {\n    const raw = window.localStorage.getItem(CONSENT_STORAGE_KEY);\n    if (!raw) return null;\n    return JSON.parse(raw) as ConsentState;\n  } catch {\n    return null;\n  }\n}\n\nexport function storeConsent(state: ConsentState) {\n  if (typeof window === \"undefined\") return;\n  try {\n    window.localStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(state));\n  } catch {\n    // ignore\n  }\n}\n\nexport function consentAllGranted(): ConsentState {\n  return {\n    ad_storage: \"granted\",\n    ad_user_data: \"granted\",\n    ad_personalization: \"granted\",\n    analytics_storage: \"granted\",\n    functionality_storage: \"granted\",\n    personalization_storage: \"granted\",\n    security_storage: \"granted\",\n  };\n}\n\nexport function consentAllDenied(): ConsentState {\n  return {\n    ad_storage: \"denied\",\n    ad_user_data: \"denied\",\n    ad_personalization: \"denied\",\n    analytics_storage: \"denied\",\n    functionality_storage: \"denied\",\n    personalization_storage: \"denied\",\n    security_storage: \"granted\", // keep essentials\n  };\n}\n\nexport function updateConsent(state: ConsentState) {\n  if (typeof window === \"undefined\") return;\n  // Use stubbed gtag if not yet loaded; pushes to dataLayer\n  if (typeof window.gtag !== \"function\") {\n    // create minimal stub to queue if not present\n    if (!window.dataLayer) window.dataLayer = [];\n    window.gtag = ((...args: unknown[]) => {\n      // push the arguments tuple as one entry like the native snippet does\n      (window.dataLayer as unknown[]).push(args as unknown);\n    }) as Window[\"gtag\"];\n  }\n  window.gtag(\"consent\", \"update\", state as unknown as Record<string, string>);\n  storeConsent(state);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAO,MAAM,iBACX,QAAQ,GAAG,CAAC,iBAAiB,IAAI;AAE5B,MAAM,cACX,oDAAyB,gBAAgB,QAAQ;AAS5C,SAAS,SAAS,GAAW;IAClC,wCAAkB;;;AAMpB;AAcO,MAAM,sBAAsB;AAE5B,SAAS;IACd,wCAAmC,OAAO;;;AAQ5C;AAEO,SAAS,aAAa,KAAmB;IAC9C,wCAAmC;;;AAMrC;AAEO,SAAS;IACd,OAAO;QACL,YAAY;QACZ,cAAc;QACd,oBAAoB;QACpB,mBAAmB;QACnB,uBAAuB;QACvB,yBAAyB;QACzB,kBAAkB;IACpB;AACF;AAEO,SAAS;IACd,OAAO;QACL,YAAY;QACZ,cAAc;QACd,oBAAoB;QACpB,mBAAmB;QACnB,uBAAuB;QACvB,yBAAyB;QACzB,kBAAkB;IACpB;AACF;AAEO,SAAS,cAAc,KAAmB;IAC/C,wCAAmC;;;AAYrC","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///Users/jw11ab/repo/procurdo/apps/web/components/app/Analytics.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect } from \"react\";\nimport { usePathname, useSearchParams } from \"next/navigation\";\nimport { isGaEnabled, pageview } from \"@/lib/analytics\";\n\nexport default function Analytics() {\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n\n  useEffect(() => {\n    if (!isGaEnabled) return;\n    const query = searchParams.toString();\n    const url = query ? `${pathname}?${query}` : pathname;\n    pageview(url);\n  }, [pathname, searchParams]);\n\n  return null;\n}\n\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;AAMe,SAAS;IACtB,MAAM,WAAW,IAAA,gRAAW;IAC5B,MAAM,eAAe,IAAA,oRAAe;IAEpC,IAAA,iVAAS,EAAC;QACR,IAAI,CAAC,8IAAW,EAAE;QAClB,MAAM,QAAQ,aAAa,QAAQ;QACnC,MAAM,MAAM,QAAQ,GAAG,SAAS,CAAC,EAAE,OAAO,GAAG;QAC7C,IAAA,2IAAQ,EAAC;IACX,GAAG;QAAC;QAAU;KAAa;IAE3B,OAAO;AACT","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///Users/jw11ab/repo/procurdo/packages/shared/lib/utils.ts"],"sourcesContent":["// Format a number (or numeric string) with thin spaces as thousands separators\n// Example: 1000000 -> \"1 000 000\"\nexport function formatThousandsSpaces(input: number | string | null | undefined): string {\n  if (input === null || input === undefined) return \"\";\n  const str = String(input).replace(/\\s/g, \"\");\n  if (str === \"\") return \"\";\n  // Detect decimals (either . or ,); keep the same separator if present\n  const match = str.match(/^(\\d+)([\\.,](\\d+))?$/);\n  if (match) {\n    const [, intPart, sepWithDec = \"\", decPart = \"\"] = match;\n    const grouped = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n    return decPart ? `${grouped}${sepWithDec}${decPart}` : grouped;\n  }\n  // If not strictly numeric, try Number conversion\n  const n = Number(str.replace(/,/g, \".\"));\n  if (Number.isFinite(n)) {\n    const int = Math.trunc(n);\n    const grouped = String(int).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n    const frac = Math.abs(n - int);\n    if (frac > 0) {\n      // Preserve  up to 2 decimals\n      const fracStr = (Math.round(frac * 100) / 100).toString().split(\".\")[1] || \"\";\n      return fracStr ? `${grouped},${fracStr}` : grouped;\n    }\n    return grouped;\n  }\n  return str;\n}\n\n// Normalize a user-entered numeric string by stripping non-digits\n// Returns digits-only (no leading zeros trimming here)\nexport function normalizeNumericInput(value: string): string {\n  return value.replace(/\\D/g, \"\");\n}\n"],"names":[],"mappings":"AAAA,+EAA+E;AAC/E,kCAAkC;;;;;;;AAC3B,SAAS,sBAAsB,KAAyC;IAC7E,IAAI,UAAU,QAAQ,UAAU,WAAW,OAAO;IAClD,MAAM,MAAM,OAAO,OAAO,OAAO,CAAC,OAAO;IACzC,IAAI,QAAQ,IAAI,OAAO;IACvB,sEAAsE;IACtE,MAAM,QAAQ,IAAI,KAAK,CAAC;IACxB,IAAI,OAAO;QACT,MAAM,GAAG,SAAS,aAAa,EAAE,EAAE,UAAU,EAAE,CAAC,GAAG;QACnD,MAAM,UAAU,QAAQ,OAAO,CAAC,yBAAyB;QACzD,OAAO,UAAU,GAAG,UAAU,aAAa,SAAS,GAAG;IACzD;IACA,iDAAiD;IACjD,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM;IACnC,IAAI,OAAO,QAAQ,CAAC,IAAI;QACtB,MAAM,MAAM,KAAK,KAAK,CAAC;QACvB,MAAM,UAAU,OAAO,KAAK,OAAO,CAAC,yBAAyB;QAC7D,MAAM,OAAO,KAAK,GAAG,CAAC,IAAI;QAC1B,IAAI,OAAO,GAAG;YACZ,6BAA6B;YAC7B,MAAM,UAAU,CAAC,KAAK,KAAK,CAAC,OAAO,OAAO,GAAG,EAAE,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI;YAC3E,OAAO,UAAU,GAAG,QAAQ,CAAC,EAAE,SAAS,GAAG;QAC7C;QACA,OAAO;IACT;IACA,OAAO;AACT;AAIO,SAAS,sBAAsB,KAAa;IACjD,OAAO,MAAM,OAAO,CAAC,OAAO;AAC9B","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/jw11ab/repo/procurdo/apps/web/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\n// Re-export shared utilities\nexport { formatThousandsSpaces, normalizeNumericInput } from \"@procurdo/shared/lib/utils\";\n"],"names":[],"mappings":";;;;AAAA;AACA;AAMA,6BAA6B;AAC7B;;;AALO,SAAS,GAAG,GAAG,MAAoB;IACtC,OAAO,IAAA,oOAAO,EAAC,IAAA,8LAAI,EAAC;AACxB","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///Users/jw11ab/repo/procurdo/apps/web/components/ui/button.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ntype Variant = \"primary\" | \"outline\" | \"ghost\";\ntype Size = \"sm\" | \"md\" | \"lg\";\n\nexport type ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  variant?: Variant;\n  size?: Size;\n};\n\nconst baseStyles =\n  \"inline-flex items-center justify-center rounded-full font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 disabled:opacity-50 disabled:pointer-events-none\";\n\nconst variantStyles: Record<Variant, string> = {\n  primary:\n    \"bg-primary text-primary-foreground hover:bg-primary/90 focus-visible:ring-ring shadow-sm shadow-black/5\",\n  outline:\n    \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n  ghost: \"hover:bg-accent hover:text-accent-foreground\",\n};\n\nconst sizeStyles: Record<Size, string> = {\n  sm: \"h-9 px-4 text-sm\",\n  md: \"h-11 px-5 text-sm\",\n  lg: \"h-12 px-7 text-base\",\n};\n\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant = \"primary\", size = \"md\", ...props }, ref) => {\n    return (\n      <button\n        ref={ref}\n        className={cn(baseStyles, variantStyles[variant], sizeStyles[size], className)}\n        {...props}\n      />\n    );\n  }\n);\n\nButton.displayName = \"Button\";\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAaA,MAAM,aACJ;AAEF,MAAM,gBAAyC;IAC7C,SACE;IACF,SACE;IACF,OAAO;AACT;AAEA,MAAM,aAAmC;IACvC,IAAI;IACJ,IAAI;IACJ,IAAI;AACN;AAEO,MAAM,uBAAS,kVAAgB,CACpC,CAAC,EAAE,SAAS,EAAE,UAAU,SAAS,EAAE,OAAO,IAAI,EAAE,GAAG,OAAO,EAAE;IAC1D,qBACE,6WAAC;QACC,KAAK;QACL,WAAW,IAAA,iJAAE,EAAC,YAAY,aAAa,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,EAAE;QACnE,GAAG,KAAK;;;;;;AAGf;AAGF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///Users/jw11ab/repo/procurdo/apps/web/components/app/CookieConsent.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  consentAllDenied,\n  consentAllGranted,\n  getStoredConsent,\n  updateConsent,\n  type ConsentState,\n} from \"@/lib/analytics\";\n\nexport default function CookieConsent() {\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    const stored = getStoredConsent();\n    if (stored) {\n      // Apply stored consent on mount\n      updateConsent(stored);\n      setVisible(false);\n    } else {\n      setVisible(true);\n    }\n  }, []);\n\n  const handleChoice = (choice: \"accept\" | \"reject\") => {\n    const state: ConsentState =\n      choice === \"accept\" ? consentAllGranted() : consentAllDenied();\n    updateConsent(state);\n    setVisible(false);\n  };\n\n  if (!visible) return null;\n\n  return (\n    <div className=\"fixed inset-x-0 bottom-0 z-50 flex justify-center p-4\">\n      <div className=\"w-full max-w-3xl rounded-lg border bg-background p-4 shadow-lg\">\n        <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n          <p className=\"text-sm text-foreground/80\">\n            We use cookies to enhance your experience, analyze traffic, and for\n            marketing. You can accept or reject non-essential cookies.\n          </p>\n          <div className=\"flex gap-2 justify-end\">\n            <Button variant=\"outline\" onClick={() => handleChoice(\"reject\")}>\n              Reject all\n            </Button>\n            <Button onClick={() => handleChoice(\"accept\")}>Accept all</Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAJA;;;;;AAYe,SAAS;IACtB,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,gVAAQ,EAAC;IAEvC,IAAA,iVAAS,EAAC;QACR,MAAM,SAAS,IAAA,mJAAgB;QAC/B,IAAI,QAAQ;YACV,gCAAgC;YAChC,IAAA,gJAAa,EAAC;YACd,WAAW;QACb,OAAO;YACL,WAAW;QACb;IACF,GAAG,EAAE;IAEL,MAAM,eAAe,CAAC;QACpB,MAAM,QACJ,WAAW,WAAW,IAAA,oJAAiB,MAAK,IAAA,mJAAgB;QAC9D,IAAA,gJAAa,EAAC;QACd,WAAW;IACb;IAEA,IAAI,CAAC,SAAS,OAAO;IAErB,qBACE,6WAAC;QAAI,WAAU;kBACb,cAAA,6WAAC;YAAI,WAAU;sBACb,cAAA,6WAAC;gBAAI,WAAU;;kCACb,6WAAC;wBAAE,WAAU;kCAA6B;;;;;;kCAI1C,6WAAC;wBAAI,WAAU;;0CACb,6WAAC,oJAAM;gCAAC,SAAQ;gCAAU,SAAS,IAAM,aAAa;0CAAW;;;;;;0CAGjE,6WAAC,oJAAM;gCAAC,SAAS,IAAM,aAAa;0CAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAM3D","debugId":null}}]
}