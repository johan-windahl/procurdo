{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/next@15.5.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/script.js/__nextjs-internal-proxy.cjs","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/src/client/script.tsx","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/script.js","turbopack:///[project]/apps/web/components/app/Analytics.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/apps/web/components/app/CookieConsent.tsx/__nextjs-internal-proxy.mjs","turbopack:///[next]/internal/font/google/inter_804a8c60.module.css [app-rsc] (css module)","turbopack:///[next]/internal/font/google/inconsolata_3bba4b61.module.css [app-rsc] (css module)","turbopack:///[project]/apps/web/app/layout.tsx","turbopack:///[next]/internal/font/google/inter_804a8c60.js","turbopack:///[next]/internal/font/google/inconsolata_3bba4b61.js"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nconst { createClientModuleProxy } = require(\"react-server-dom-turbopack/server\");\n\n__turbopack_context__.n(createClientModuleProxy(\"[project]/node_modules/.pnpm/next@15.5.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/script.js\"));\n","'use client'\n\nimport ReactDOM from 'react-dom'\nimport React, { useEffect, useContext, useRef, type JSX } from 'react'\nimport type { ScriptHTMLAttributes } from 'react'\nimport { HeadManagerContext } from '../shared/lib/head-manager-context.shared-runtime'\nimport { setAttributesFromProps } from './set-attributes-from-props'\nimport { requestIdleCallback } from './request-idle-callback'\n\nconst ScriptCache = new Map()\nconst LoadCache = new Set()\n\nexport interface ScriptProps extends ScriptHTMLAttributes<HTMLScriptElement> {\n  strategy?: 'afterInteractive' | 'lazyOnload' | 'beforeInteractive' | 'worker'\n  id?: string\n  onLoad?: (e: any) => void\n  onReady?: () => void | null\n  onError?: (e: any) => void\n  children?: React.ReactNode\n  stylesheets?: string[]\n}\n\n/**\n * @deprecated Use `ScriptProps` instead.\n */\nexport type Props = ScriptProps\n\nconst insertStylesheets = (stylesheets: string[]) => {\n  // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad\n  //\n  // Using ReactDOM.preinit to feature detect appDir and inject styles\n  // Stylesheets might have already been loaded if initialized with Script component\n  // Re-inject styles here to handle scripts loaded via handleClientScriptLoad\n  // ReactDOM.preinit handles dedup and ensures the styles are loaded only once\n  if (ReactDOM.preinit) {\n    stylesheets.forEach((stylesheet: string) => {\n      ReactDOM.preinit(stylesheet, { as: 'style' })\n    })\n\n    return\n  }\n\n  // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad\n  //\n  // We use this function to load styles when appdir is not detected\n  // TODO: Use React float APIs to load styles once available for pages dir\n  if (typeof window !== 'undefined') {\n    let head = document.head\n    stylesheets.forEach((stylesheet: string) => {\n      let link = document.createElement('link')\n\n      link.type = 'text/css'\n      link.rel = 'stylesheet'\n      link.href = stylesheet\n\n      head.appendChild(link)\n    })\n  }\n}\n\nconst loadScript = (props: ScriptProps): void => {\n  const {\n    src,\n    id,\n    onLoad = () => {},\n    onReady = null,\n    dangerouslySetInnerHTML,\n    children = '',\n    strategy = 'afterInteractive',\n    onError,\n    stylesheets,\n  } = props\n\n  const cacheKey = id || src\n\n  // Script has already loaded\n  if (cacheKey && LoadCache.has(cacheKey)) {\n    return\n  }\n\n  // Contents of this script are already loading/loaded\n  if (ScriptCache.has(src)) {\n    LoadCache.add(cacheKey)\n    // It is possible that multiple `next/script` components all have same \"src\", but has different \"onLoad\"\n    // This is to make sure the same remote script will only load once, but \"onLoad\" are executed in order\n    ScriptCache.get(src).then(onLoad, onError)\n    return\n  }\n\n  /** Execute after the script first loaded */\n  const afterLoad = () => {\n    // Run onReady for the first time after load event\n    if (onReady) {\n      onReady()\n    }\n    // add cacheKey to LoadCache when load successfully\n    LoadCache.add(cacheKey)\n  }\n\n  const el = document.createElement('script')\n\n  const loadPromise = new Promise<void>((resolve, reject) => {\n    el.addEventListener('load', function (e) {\n      resolve()\n      if (onLoad) {\n        onLoad.call(this, e)\n      }\n      afterLoad()\n    })\n    el.addEventListener('error', function (e) {\n      reject(e)\n    })\n  }).catch(function (e) {\n    if (onError) {\n      onError(e)\n    }\n  })\n\n  if (dangerouslySetInnerHTML) {\n    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n    el.innerHTML = (dangerouslySetInnerHTML.__html as string) || ''\n\n    afterLoad()\n  } else if (children) {\n    el.textContent =\n      typeof children === 'string'\n        ? children\n        : Array.isArray(children)\n          ? children.join('')\n          : ''\n\n    afterLoad()\n  } else if (src) {\n    el.src = src\n    // do not add cacheKey into LoadCache for remote script here\n    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)\n\n    ScriptCache.set(src, loadPromise)\n  }\n\n  setAttributesFromProps(el, props)\n\n  if (strategy === 'worker') {\n    el.setAttribute('type', 'text/partytown')\n  }\n\n  el.setAttribute('data-nscript', strategy)\n\n  // Load styles associated with this script\n  if (stylesheets) {\n    insertStylesheets(stylesheets)\n  }\n\n  document.body.appendChild(el)\n}\n\nexport function handleClientScriptLoad(props: ScriptProps) {\n  const { strategy = 'afterInteractive' } = props\n  if (strategy === 'lazyOnload') {\n    window.addEventListener('load', () => {\n      requestIdleCallback(() => loadScript(props))\n    })\n  } else {\n    loadScript(props)\n  }\n}\n\nfunction loadLazyScript(props: ScriptProps) {\n  if (document.readyState === 'complete') {\n    requestIdleCallback(() => loadScript(props))\n  } else {\n    window.addEventListener('load', () => {\n      requestIdleCallback(() => loadScript(props))\n    })\n  }\n}\n\nfunction addBeforeInteractiveToCache() {\n  const scripts = [\n    ...document.querySelectorAll('[data-nscript=\"beforeInteractive\"]'),\n    ...document.querySelectorAll('[data-nscript=\"beforePageRender\"]'),\n  ]\n  scripts.forEach((script) => {\n    const cacheKey = script.id || script.getAttribute('src')\n    LoadCache.add(cacheKey)\n  })\n}\n\nexport function initScriptLoader(scriptLoaderItems: ScriptProps[]) {\n  scriptLoaderItems.forEach(handleClientScriptLoad)\n  addBeforeInteractiveToCache()\n}\n\n/**\n * Load a third-party scripts in an optimized way.\n *\n * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)\n */\nfunction Script(props: ScriptProps): JSX.Element | null {\n  const {\n    id,\n    src = '',\n    onLoad = () => {},\n    onReady = null,\n    strategy = 'afterInteractive',\n    onError,\n    stylesheets,\n    ...restProps\n  } = props\n\n  // Context is available only during SSR\n  let { updateScripts, scripts, getIsSsr, appDir, nonce } =\n    useContext(HeadManagerContext)\n\n  // if a nonce is explicitly passed to the script tag, favor that over the automatic handling\n  nonce = restProps.nonce || nonce\n\n  /**\n   * - First mount:\n   *   1. The useEffect for onReady executes\n   *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)\n   *      onReady is skipped, set hasOnReadyEffectCalled.current to true\n   *   3. The useEffect for loadScript executes\n   *   4. hasLoadScriptEffectCalled.current is false, loadScript executes\n   *      Once the script is loaded, the onLoad and onReady will be called by then\n   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n   *   5. The useEffect for onReady executes again\n   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n   *   7. The useEffect for loadScript executes again\n   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n   *\n   * - Second mount:\n   *   1. The useEffect for onReady executes\n   *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)\n   *      onReady is called, set hasOnReadyEffectCalled.current to true\n   *   3. The useEffect for loadScript executes\n   *   4. The script is already loaded, loadScript bails out\n   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n   *   5. The useEffect for onReady executes again\n   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n   *   7. The useEffect for loadScript executes again\n   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n   */\n  const hasOnReadyEffectCalled = useRef(false)\n\n  useEffect(() => {\n    const cacheKey = id || src\n    if (!hasOnReadyEffectCalled.current) {\n      // Run onReady if script has loaded before but component is re-mounted\n      if (onReady && cacheKey && LoadCache.has(cacheKey)) {\n        onReady()\n      }\n\n      hasOnReadyEffectCalled.current = true\n    }\n  }, [onReady, id, src])\n\n  const hasLoadScriptEffectCalled = useRef(false)\n\n  useEffect(() => {\n    if (!hasLoadScriptEffectCalled.current) {\n      if (strategy === 'afterInteractive') {\n        loadScript(props)\n      } else if (strategy === 'lazyOnload') {\n        loadLazyScript(props)\n      }\n\n      hasLoadScriptEffectCalled.current = true\n    }\n  }, [props, strategy])\n\n  if (strategy === 'beforeInteractive' || strategy === 'worker') {\n    if (updateScripts) {\n      scripts[strategy] = (scripts[strategy] || []).concat([\n        {\n          id,\n          src,\n          onLoad,\n          onReady,\n          onError,\n          ...restProps,\n          nonce,\n        },\n      ])\n      updateScripts(scripts)\n    } else if (getIsSsr && getIsSsr()) {\n      // Script has already loaded during SSR\n      LoadCache.add(id || src)\n    } else if (getIsSsr && !getIsSsr()) {\n      loadScript({\n        ...props,\n        nonce,\n      })\n    }\n  }\n\n  // For the app directory, we need React Float to preload these scripts.\n  if (appDir) {\n    // Injecting stylesheets here handles beforeInteractive and worker scripts correctly\n    // For other strategies injecting here ensures correct stylesheet order\n    // ReactDOM.preinit handles loading the styles in the correct order,\n    // also ensures the stylesheet is loaded only once and in a consistent manner\n    //\n    // Case 1: Styles for beforeInteractive/worker with appDir - handled here\n    // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet\n    // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here\n    // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function\n    if (stylesheets) {\n      stylesheets.forEach((styleSrc) => {\n        ReactDOM.preinit(styleSrc, { as: 'style' })\n      })\n    }\n\n    // Before interactive scripts need to be loaded by Next.js' runtime instead\n    // of native <script> tags, because they no longer have `defer`.\n    if (strategy === 'beforeInteractive') {\n      if (!src) {\n        // For inlined scripts, we put the content in `children`.\n        if (restProps.dangerouslySetInnerHTML) {\n          // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n          restProps.children = restProps.dangerouslySetInnerHTML\n            .__html as string\n          delete restProps.dangerouslySetInnerHTML\n        }\n\n        return (\n          <script\n            nonce={nonce}\n            dangerouslySetInnerHTML={{\n              __html: `(self.__next_s=self.__next_s||[]).push(${JSON.stringify([\n                0,\n                { ...restProps, id },\n              ])})`,\n            }}\n          />\n        )\n      } else {\n        // @ts-ignore\n        ReactDOM.preload(\n          src,\n          restProps.integrity\n            ? {\n                as: 'script',\n                integrity: restProps.integrity,\n                nonce,\n                crossOrigin: restProps.crossOrigin,\n              }\n            : { as: 'script', nonce, crossOrigin: restProps.crossOrigin }\n        )\n        return (\n          <script\n            nonce={nonce}\n            dangerouslySetInnerHTML={{\n              __html: `(self.__next_s=self.__next_s||[]).push(${JSON.stringify([\n                src,\n                { ...restProps, id },\n              ])})`,\n            }}\n          />\n        )\n      }\n    } else if (strategy === 'afterInteractive') {\n      if (src) {\n        // @ts-ignore\n        ReactDOM.preload(\n          src,\n          restProps.integrity\n            ? {\n                as: 'script',\n                integrity: restProps.integrity,\n                nonce,\n                crossOrigin: restProps.crossOrigin,\n              }\n            : { as: 'script', nonce, crossOrigin: restProps.crossOrigin }\n        )\n      }\n    }\n  }\n\n  return null\n}\n\nObject.defineProperty(Script, '__nextScript', { value: true })\n\nexport default Script\n","module.exports = require('./dist/client/script')\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/apps/web/components/app/Analytics.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/web/components/app/Analytics.tsx\",\n    \"default\",\n);\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/apps/web/components/app/CookieConsent.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/web/components/app/CookieConsent.tsx\",\n    \"default\",\n);\n","__turbopack_context__.v({\n  \"className\": \"inter_804a8c60-module__WPrDma__className\",\n  \"variable\": \"inter_804a8c60-module__WPrDma__variable\",\n});\n","__turbopack_context__.v({\n  \"className\": \"inconsolata_3bba4b61-module__ftmnVW__className\",\n  \"variable\": \"inconsolata_3bba4b61-module__ftmnVW__variable\",\n});\n","import type { Metadata } from \"next\";\nimport Script from \"next/script\";\nimport { Suspense } from \"react\";\nimport Analytics from \"@/components/app/Analytics\";\nimport CookieConsent from \"@/components/app/CookieConsent\";\nimport { Inter, Inconsolata } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst geistSans = Inter({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n  display: \"swap\",\n});\n\nconst geistMono = Inconsolata({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n  display: \"swap\",\n});\n\nexport const metadata: Metadata = {\n  metadataBase: new URL(\"https://www.procurdo.com\"),\n  title: {\n    default: \"Procurdo – Sök offentliga upphandlingar i Sverige\",\n    template: \"%s | Procurdo\",\n  },\n  description:\n    \"Sök offentliga upphandlingar i Sverige. Bevakning av aktuella upphandlingar, ramavtal och anbud – snabbt och gratis att komma igång.\",\n  openGraph: {\n    type: \"website\",\n    url: \"https://www.procurdo.com/sv-se\",\n    siteName: \"Procurdo\",\n    title: \"Procurdo – Sök offentliga upphandlingar i Sverige\",\n    description:\n      \"Sök offentliga upphandlingar, bevaka upphandlingar och hitta ramavtal.\",\n  },\n  twitter: {\n    card: \"summary_large_image\",\n    site: \"@procurdo\",\n    title: \"Procurdo – Sök offentliga upphandlingar i Sverige\",\n    description:\n      \"Sök offentliga upphandlingar, bevaka upphandlingar och hitta ramavtal.\",\n  },\n  icons: {\n    icon: \"/favicon.ico\",\n  },\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const isProd = process.env.NODE_ENV === \"production\";\n  const GA_ID = process.env.NEXT_PUBLIC_GA_ID || \"G-2KT03XRWKB\";\n  return (\n    <html lang=\"sv-SE\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        {isProd && GA_ID ? (\n          <>\n            {/* Consent Mode default: deny until user choice */}\n            <Script id=\"consent-default\" strategy=\"beforeInteractive\">\n              {`\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(arguments);} \n                gtag('consent', 'default', {\n                  'ad_storage': 'denied',\n                  'ad_user_data': 'denied',\n                  'ad_personalization': 'denied',\n                  'analytics_storage': 'denied',\n                  'functionality_storage': 'denied',\n                  'personalization_storage': 'denied',\n                  'security_storage': 'granted',\n                  'wait_for_update': 500\n                });\n              `}\n            </Script>\n            <Script id=\"gtag-init\" strategy=\"afterInteractive\">\n              {`\n                (function() {\n                  var script = document.createElement('script');\n                  script.async = true;\n                  script.src = 'https://www.googletagmanager.com/gtag/js?id=${GA_ID}';\n                  document.head.appendChild(script);\n                  \n                  window.dataLayer = window.dataLayer || [];\n                  function gtag(){dataLayer.push(arguments);} \n                  gtag('js', new Date());\n                  gtag('config', '${GA_ID}', { send_page_view: false });\n                })();\n              `}\n            </Script>\n            {/* Restore saved consent as soon as possible */}\n            <Script id=\"consent-restore\" strategy=\"afterInteractive\">\n              {`\n                (function(){\n                  try {\n                    var raw = localStorage.getItem('cookie-consent-v2');\n                    if (raw) {\n                      var state = JSON.parse(raw);\n                      window.dataLayer = window.dataLayer || [];\n                      function gtag(){dataLayer.push(arguments);} \n                      gtag('consent', 'update', state);\n                    }\n                  } catch (e) {}\n                })();\n              `}\n            </Script>\n          </>\n        ) : null}\n        {/* SPA route change tracking */}\n        {isProd && GA_ID ? (\n          <Suspense fallback={null}>\n            <Analytics />\n          </Suspense>\n        ) : null}\n        {/* Cookie Banner */}\n        {isProd ? <CookieConsent /> : null}\n        {children}\n      </body>\n      </html>\n  );\n}\n","import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Inter%22,%22arguments%22:[{%22variable%22:%22--font-geist-sans%22,%22subsets%22:[%22latin%22],%22display%22:%22swap%22}],%22variableName%22:%22geistSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Inter', 'Inter Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n","import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Inconsolata%22,%22arguments%22:[{%22variable%22:%22--font-geist-mono%22,%22subsets%22:[%22latin%22],%22display%22:%22swap%22}],%22variableName%22:%22geistMono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Inconsolata', 'Inconsolata Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":["handleClientScriptLoad","initScriptLoader","ScriptCache","Map","LoadCache","Set","insertStylesheets","stylesheets","ReactDOM","preinit","forEach","stylesheet","as","window","head","document","link","createElement","type","rel","href","appendChild","loadScript","props","src","id","onLoad","onReady","dangerouslySetInnerHTML","children","strategy","onError","cacheKey","has","add","get","then","afterLoad","el","loadPromise","Promise","resolve","reject","addEventListener","e","call","catch","innerHTML","__html","textContent","Array","isArray","join","set","setAttributesFromProps","setAttribute","body","requestIdleCallback","loadLazyScript","readyState","addBeforeInteractiveToCache","scripts","querySelectorAll","script","getAttribute","scriptLoaderItems","Script","restProps","updateScripts","getIsSsr","appDir","nonce","useContext","HeadManagerContext","hasOnReadyEffectCalled","useRef","useEffect","current","hasLoadScriptEffectCalled","concat","styleSrc","JSON","stringify","preload","integrity","crossOrigin","Object","defineProperty","value"],"mappings":"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","ignoreList":[0,2,3,4,5,6,8,9]}