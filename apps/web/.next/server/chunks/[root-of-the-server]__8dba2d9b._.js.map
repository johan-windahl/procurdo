{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///Users/jw11ab/repo/procurdo/apps/web/app/api/search/route.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\n\n// Loosely typed helpers for the TED API payloads\ntype LangObject = Record<string, unknown>;\ntype MaybeLang = string | number | LangObject | Array<string | number | LangObject>;\n\ntype TEDNotice = {\n  'publication-number'?: string;\n  'publication-date'?: unknown;\n  'deadline-receipt-tender-date-lot'?: unknown;\n  'notice-title'?: MaybeLang;\n  'buyer-name'?: MaybeLang;\n  'buyer-city'?: MaybeLang;\n  'buyer-country'?: MaybeLang;\n  'place-of-performance'?: MaybeLang;\n  'place-of-performance-country-lot'?: MaybeLang;\n  links?: unknown;\n  'tender-value'?: unknown;\n  'estimated-value-lot'?: unknown;\n  'estimated-value-cur-lot'?: unknown;\n  'classification-cpv'?: MaybeLang;\n  'contract-nature'?: MaybeLang;\n  'notice-type'?: MaybeLang;\n  'procedure-type'?: MaybeLang;\n  'framework-agreement'?: MaybeLang;\n  'framework-agreement-lot'?: MaybeLang;\n  'description-lot'?: MaybeLang;\n  'document-url-lot'?: MaybeLang;\n  'document-url-part'?: MaybeLang;\n};\n\ntype TEDError = {\n  type?: string;\n  message?: string;\n  parameterName?: string;\n  unsupportedValue?: string;\n  location?: unknown;\n};\n\ntype TEDSearchResponse = {\n  notices?: TEDNotice[];\n  totalNoticeCount?: number | string;\n  error?: TEDError;\n};\n\ntype Filters = {\n  cpvs: string[];\n  text: string;\n  dateFrom: string;\n  deadlineTo?: string;\n  country: string;\n  city: string;\n  status: \"ongoing\" | \"completed\";\n  noticeType?: string;\n  valueMin?: number | string;\n  valueMax?: number | string;\n};\n\nconst isRecord = (v: unknown): v is Record<string, unknown> =>\n  typeof v === \"object\" && v !== null;\n\nconst toDateString = (input: unknown): string => {\n  if (input == null) return \"\";\n  if (Array.isArray(input)) return toDateString(input[0] as unknown);\n  if (typeof input === \"string\") return input;\n  if (isRecord(input)) {\n    const candidate = input.date ?? input.value ?? input.text;\n    if (typeof candidate === \"string\") return candidate;\n    return \"\";\n  }\n  return String(input);\n};\n\nconst formatDateToISO = (raw: unknown): string => {\n  const dateString = toDateString(raw);\n  if (!dateString) return \"\";\n  if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) return dateString;\n  const tzMatch = dateString.match(/^(\\d{4}-\\d{2}-\\d{2})[A-Za-z+-].*$/);\n  if (tzMatch) return tzMatch[1];\n  const d = new Date(dateString);\n  if (isNaN(d.getTime())) return dateString;\n  const y = d.getFullYear();\n  const m = String(d.getMonth() + 1).padStart(2, \"0\");\n  const day = String(d.getDate()).padStart(2, \"0\");\n  return `${y}-${m}-${day}`;\n};\n\nconst formatDateForTED = (dateString: string): string => {\n  if (!dateString) return \"\";\n  return dateString.replace(/-/g, \"\");\n};\n\nconst extractText = (field: unknown): string => {\n  const pickFromObject = (obj: unknown): string => {\n    if (!isRecord(obj)) return \"\";\n    // Some fields can be like { eng: \"...\", swe: \"...\" } or { mul: { ... } }\n    const preferredKeys = [\"eng\", \"en\", \"swe\", \"sv\", \"mul\", \"default\"];\n    for (const k of preferredKeys) {\n      if (k in obj) {\n        const v = obj[k as keyof typeof obj];\n        const s = extractText(v);\n        if (s) return s;\n      }\n    }\n    // Fallback: scan values\n    for (const v of Object.values(obj)) {\n      const s = extractText(v);\n      if (s) return s;\n    }\n    return \"\";\n  };\n\n  if (field == null) return \"\";\n  if (typeof field === \"string\") return field;\n  if (typeof field === \"number\") return String(field);\n  if (Array.isArray(field)) {\n    for (const v of field) {\n      const s = extractText(v);\n      if (s) return s;\n    }\n    return \"\";\n  }\n  if (isRecord(field)) {\n    // Common wrappers: { text: \"...\" } or { value: \"...\" }\n    if (typeof field.text === \"string\") return field.text as string;\n    if (typeof field.value === \"string\") return field.value as string;\n    return pickFromObject(field);\n  }\n  return \"\";\n};\n\nconst quote = (s: string) => `'${s.replace(/'/g, \"\\\"\").trim()}'`;\n\n// Prefer the last segment after an en dash/em dash, e.g.\n// \"Sweden – Personnel and payroll services – Title\" => \"Title\"\nconst sanitizeTitle = (s: string): string => {\n  const trimmed = s.trim().replace(/\\s+/g, \" \");\n  const parts = trimmed.split(/\\s*[–—]\\s*/); // en/em dash only\n  const last = parts[parts.length - 1]?.trim();\n  return last || trimmed;\n};\n\nconst buildQuery = (f: Filters) => {\n  const parts: string[] = [];\n  if (Array.isArray(f.cpvs) && f.cpvs.length > 0) {\n    const cpv = f.cpvs.map((c) => `classification-cpv = ${c}`).join(\" OR \");\n    parts.push(`(${cpv})`);\n  }\n  if (f.text) parts.push(`FT ~ (${quote(f.text)})`);\n  if (f.dateFrom) parts.push(`publication-date >= ${formatDateForTED(f.dateFrom)}`);\n  else parts.push(`publication-date >= today(-365)`);\n  if (f.deadlineTo) parts.push(`deadline-receipt-tender-date-lot <= ${formatDateForTED(f.deadlineTo)}`);\n  if (f.country) {\n    // Quote country value to avoid parser issues; supports 'SWE' or 'Sweden'\n    parts.push(`buyer-country = ${quote(f.country)}`);\n  }\n  if (f.city) parts.push(`buyer-city ~ (${quote(f.city)})`);\n  if (f.noticeType) parts.push(`notice-type = ${quote(f.noticeType)}`);\n  const hasMin = f.valueMin !== undefined && f.valueMin !== null && String(f.valueMin).trim() !== \"\";\n  const hasMax = f.valueMax !== undefined && f.valueMax !== null && String(f.valueMax).trim() !== \"\";\n  const min = hasMin ? Number(f.valueMin) : undefined;\n  const max = hasMax ? Number(f.valueMax) : undefined;\n  if (hasMin && Number.isFinite(min as number)) {\n    parts.push(`estimated-value-lot >= ${min}`);\n  }\n  if (hasMax && Number.isFinite(max as number)) {\n    parts.push(`estimated-value-lot <= ${max}`);\n  }\n\n  if (f.status === \"ongoing\") {\n    parts.push(\n      `(notice-type IN (pin-only pin-buyer pin-rtl pin-tran pin-cfc-standard pin-cfc-social qu-sy cn-standard cn-social subco cn-desg))`\n    );\n  } else if (f.status === \"completed\") {\n    parts.push(`(notice-type IN (can-standard can-social can-desg can-tran))`);\n  }\n  // We already add a default 1-year window above when no dateFrom is provided.\n  return parts.join(\" AND \");\n};\n\nexport async function POST(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const page = Math.max(1, Number(searchParams.get(\"page\") || \"1\"));\n  const limit = 20;\n\n  let filters: Filters;\n  try {\n    filters = (await req.json()) as Filters;\n  } catch {\n    filters = { cpvs: [], text: \"\", dateFrom: \"\", country: \"\", city: \"\", status: \"ongoing\" };\n  }\n\n  const query = buildQuery(filters);\n  const payload = {\n    query,\n    page,\n    limit,\n    fields: [\n      'publication-number',\n      'publication-date',\n      'notice-title',\n      'buyer-name',\n      'buyer-city',\n      'buyer-country',\n      'place-of-performance-country-lot',\n      'links',\n      'tender-value',\n      'estimated-value-lot',\n      'estimated-value-cur-lot',\n      'deadline-receipt-tender-date-lot',\n      'classification-cpv',\n      'contract-nature',\n      'notice-type',\n      'procedure-type',\n      'framework-agreement-lot',\n      'description-lot',\n      'document-url-lot',\n      'document-url-part',\n    ],\n  } as const;\n\n  try {\n    const res = await fetch(\"https://api.ted.europa.eu/v3/notices/search\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\", Accept: \"application/json\" },\n      body: JSON.stringify(payload),\n    });\n    const json: TEDSearchResponse = await res.json();\n    if (!res.ok || json?.error) {\n      const err: TEDError = json?.error || {};\n      return new Response(\n        JSON.stringify({\n          items: [],\n          total: 0,\n          error: err.type || 'QUERY_ERROR',\n          message: err.message || 'Fel vid sökning',\n          parameterName: err.parameterName,\n          unsupportedValue: err.unsupportedValue,\n          location: err.location,\n        }),\n        { status: res.status || 400, headers: { \"Content-Type\": \"application/json\" } }\n      );\n    }\n\n    const items = (json?.notices || []).map((n: TEDNotice) => {\n      const publicationDate = formatDateToISO(n[\"publication-date\"]);\n      const deadlineRaw = n[\"deadline-receipt-tender-date-lot\"] || \"\";\n      const deadlineDate = deadlineRaw ? formatDateToISO(deadlineRaw) : undefined;\n      let fromLinks: string | undefined;\n      if (Array.isArray(n.links) && n.links.length > 0) {\n        const first = n.links[0] as unknown;\n        if (isRecord(first) && typeof first.href === \"string\") {\n          fromLinks = first.href;\n        } else {\n          const s = extractText(first);\n          fromLinks = s || undefined;\n        }\n      }\n      const documentUrl = extractText(n['document-url-lot']) || extractText(n['document-url-part']) || fromLinks;\n      const tVal = isRecord(n[\"tender-value\"]) ? (n[\"tender-value\"] as Record<string, unknown>) : undefined;\n      const tenderValue = extractText((tVal?.amount ?? tVal?.value) as unknown);\n      const estValue = extractText(n['estimated-value-lot']);\n      const estCur = extractText(n['estimated-value-cur-lot']);\n      const value = estValue || tenderValue || undefined;\n      const valueCurrency = estValue ? estCur || undefined : undefined;\n      const buyerCountry = extractText(n['buyer-country']);\n      const placeCountry = extractText(n['place-of-performance-country-lot']);\n      const cpv = extractText(n['classification-cpv']);\n      const contractNature = extractText(n['contract-nature']);\n      const noticeType = extractText(n['notice-type']);\n      const procedureType = extractText(n['procedure-type']);\n      const framework = extractText(n['framework-agreement-lot']) || extractText(n['framework-agreement']);\n      return {\n        publicationNumber: n[\"publication-number\"] || \"\",\n        publicationDate,\n        deadlineDate,\n        title: sanitizeTitle(extractText(n[\"notice-title\"]) || \"Upphandling\"),\n        buyerName: extractText(n[\"buyer-name\"]) || \"\",\n        buyerCity: extractText(n[\"buyer-city\"]) || \"\",\n        country: buyerCountry || placeCountry || \"\",\n        documentUrl,\n        value: value || undefined,\n        valueCurrency,\n        description: extractText(n['description-lot']) || undefined,\n        classification: cpv || undefined,\n        contractNature: contractNature || undefined,\n        noticeType: noticeType || undefined,\n        procedureType: procedureType || undefined,\n        frameworkAgreement: framework ? framework.toLowerCase() === 'true' || framework === 'yes' : undefined,\n      };\n    });\n\n    // Sort by most recent publication date first.\n    // Note: This sorts within the current page of results returned by TED API.\n    items.sort((a, b) => {\n      const da = a.publicationDate || \"\";\n      const db = b.publicationDate || \"\";\n      // ISO YYYY-MM-DD lexicographical comparison works for date ordering\n      return db.localeCompare(da);\n    });\n\n    const total = Number(json?.totalNoticeCount || 0);\n    return new Response(JSON.stringify({ items, total }), {\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (e) {\n    console.error(e);\n    return new Response(JSON.stringify({ items: [], total: 0 }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}